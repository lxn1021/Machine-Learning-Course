>> A = [1 2 3; 4 5 6]
A =

   1   2   3
   4   5   6

>> diary off
>> 
>> 5+6
ans =  11
>> 3-2
ans =  1
>> 5*8
ans =  40
>> 1/2
ans =  0.50000
>> 2^6
ans =  64
>> 
>> 
>> 1 == 2   %false
ans = 0
>> 1 ~= 2
ans = 1
>> 1 && 0   % AND
ans = 0
>> 1 || 0   % OR
ans = 1
>> 
>> 
>> 
>> PS1('>> ')
>> 
>> 
>> a = 3
a =  3
>> a = 3;
>> a = 3   % Semicolon suppresses output
a =  3
>> a = 3;   % Semicolon suppresses output
>> b = 'hi';
>> b
b = hi
>> c = (3 >= 1);
>> c
c = 1
>> 
>> 
>> 
>> a=pi;
>> a
a =  3.1416
>> disp(a);
 3.1416
>> disp(sprintf('2 decimals: %0.2f', a))
2 decimals: 3.14
>> disp(sprintf('6 decimals: %0.6f', a))
6 decimals: 3.141593
>> a
a =  3.1416
>> format long
>> a
a =  3.141592653589793
>> format short
>> a
a =  3.1416
>> 
>> 
>> 
>> 
>> A = [1 2; 3 4; 5 6]
A =

   1   2
   3   4
   5   6

>> A = [1 2;]
A =

   1   2

>> A = [1 2;
3 4;
5 6]
A =

   1   2
   3   4
   5   6

>> v = [1 2 3]
v =

   1   2   3

>> v = [1; 2; 3]
v =

   1
   2
   3

>> 
>> v = 1:0.1:2
v =

 Columns 1 through 8:

    1.0000    1.1000    1.2000    1.3000    1.4000    1.5000    1.6000    1.7000

 Columns 9 through 11:

    1.8000    1.9000    2.0000

>> 
>> v = 1:6
v =

   1   2   3   4   5   6

>> 
>> 
>> ones(2,3)
ans =

   1   1   1
   1   1   1

>> C = 2*ones(2,3)
C =

   2   2   2
   2   2   2

>> C = [2 2 2; 2 2 2]
C =

   2   2   2
   2   2   2

>> w = ones(1, 3)
w =

   1   1   1

>> w = zeros(1,3)
w =

   0   0   0

>> w = rand(1,3)
w =

   0.968933   0.670934   0.037507

>> rand(3,3)
ans =

   0.45783   0.17911   0.76298
   0.70856   0.71027   0.99688
   0.18936   0.64714   0.62530

>> rand(3,3)
ans =

   0.499153   0.373856   0.072198
   0.015679   0.884829   0.902300
   0.117273   0.230431   0.079979

>> rand(3,3)
ans =

   0.446495   0.220880   0.862487
   0.135001   0.023794   0.724195
   0.261074   0.511045   0.697201

>> w = randn(1,3)
w =

   0.93293   0.17001  -0.20473

>> w = randn(1,3)
w =

  -0.374933   0.034289   0.385190

>> 
>> 
>> 
>> w = -6 + sqrt(10)*(randn(1,10000));
>> hist(w)
>> hist(w, 50)
>> 
>> hist(2)
error: called from
    __bar__ at line 62 column 9
    bar at line 118 column 16
    hist at line 192 column 5
error: bar: X vector values must be unique
>> hist(w)
>> error: called from
    __opengl_print__ at line 112 column 7
    print at line 561 column 14
error: print.m: GIF output is not available for the FLTK graphics toolkit
error: parse error
>> hist(w)
>> hist(w, 50)
>> 
>> eye(4)
ans =

Diagonal Matrix

   1   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   1

>> I = eye(4)
I =

Diagonal Matrix

   1   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   1

>> I = eye(6)
I =

Diagonal Matrix

   1   0   0   0   0   0
   0   1   0   0   0   0
   0   0   1   0   0   0
   0   0   0   1   0   0
   0   0   0   0   1   0
   0   0   0   0   0   1

>> eye(3)
ans =

Diagonal Matrix

   1   0   0
   0   1   0
   0   0   1

>> 
>> 
>> 
>> 
>> 
>> 
>> help eye
'eye' is a built-in function from the file libinterp/corefcn/data.cc

 -- eye (N)
 -- eye (M, N)
 -- eye ([M N])
 -- eye (..., CLASS)
     Return an identity matrix.

     If invoked with a single scalar argument N, return a square NxN
     identity matrix.

     If supplied two scalar arguments (M, N), 'eye' takes them to be the
     number of rows and columns.  If given a vector with two elements,
     'eye' uses the values of the elements as the number of rows and
     columns, respectively.  For example:

          eye (3)
           =>  1  0  0
               0  1  0
               0  0  1

     The following expressions all produce the same result:

          eye (2)
          ==
          eye (2, 2)
          ==
          eye (size ([1, 2; 3, 4]))

     The optional argument CLASS, allows 'eye' to return an array of the
     specified type, like

          val = zeros (n,m, "uint8")

     Calling 'eye' with no arguments is equivalent to calling it with an
     argument of 1.  Any negative dimensions are treated as zero.  These
     odd definitions are for compatibility with MATLAB.

     See also: speye, ones, zeros.

Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at https://www.octave.org and via the help@octave.org
mailing list.
>> 
>> diary off
